ggplot(data, aes(bud_burst,reorder(species, bud_burst, FUN = median, na.rm = TRUE))) +
geom_violin(aes(fill = reorder(species, bud_burst, FUN = median, na.rm = TRUE)), show.legend = FALSE, na.rm = TRUE) +
stat_summary(fun = "median", size = 3.5, geom = "point", na.rm = TRUE) +
geom_jitter(aes(alpha = year), height = 0, width = 0.2, na.rm = TRUE) +
labs(
x = "Date",
y = "Species",
alpha = "Year"
) +
scale_y_discrete(limits=rev) +
theme(axis.text.y = element_text(face="italic",size=12),
axis.text.x = element_text(size=12),
axis.title = element_text(face="bold",size=13),
legend.text = element_text(size=12),
legend.title = element_text(size=13),
panel.background = element_rect(fill="white"),
panel.grid.major = element_line(color="gray93"))
library(shiny)
ui <- ...
library(shiny)
ui <- ...
runApp()
install.packages("bibliometrix")
install.packages("datawizard")
install.packages("DBI")
install.packages("downlit")
install.packages("evaluate")
install.packages("highr")
install.packages("insight")
install.packages("knitr")
install.packages("leaps")
install.packages("markdown")
install.packages("modelbased")
install.packages("nlme")
install.packages("quantreg")
install.packages("QuickJSR")
install.packages("RcppArmadillo")
install.packages("rlang")
install.packages("rsconnect")
install.packages("shinytest")
install.packages(c("SparseM", "StanHeaders", "xts"))
shiny::runApp('blog/2023/03/02/wauseon-tree-phenology')
runApp('blog/2023/03/02/wauseon-tree-phenology')
renv::snapshot()
renv::status()
?renv::status()
renv::project()
cwd()
cwd
renv::snapshot()
renv:status()
renv::status()
install.packages("yaml")
renv::snapshot()
renv::install("shinylive")
renv::install("downlit","xml2")
renv::status()
install.packages("shiny")
renv::install("shiny")
renv::status()
renv::snapshot()
renv::lockfile_modify()
renv::dependencies()
renv::settings$snapshot.type("all")
renv::snapshot()
install.packages("pak")
pak::pak("posit-dev/r-shinylive")
renv::status()
renv::snapshot()
renv::status()
shinylive::assets_info()
renv::deactivate()
.libPaths()
renv::activate()
renv::dependencies()
renv::settings()
renv::settings$snapshot.type()
renv::settings$snapshot.type("explicit")
renv::settings$snapshot.type()
renv::dependencies()
renv::dependencies()
renv::settings$snapshot.type()
renv::snapshot()
renv::settings$ignored.packages()
renv::settings$snapshot.type("all")
renv::update()
install.packages("usethis")
renv::clean()
renv::diagnostics()
renv::status?
?renv::status()
renv::status()
library(shinylive)
remove.packages("shinylive", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
renv::install("shinylive")
renv::status()
renv::snapshot()
renv::status()
renv::settings$snapshot.type("implicit")
renv::status()
renv::status()
git::dependencies()
renv::dependencies()
renv::status()
renv::dependencies()
renv::settings$snapshot.type()
renv::settings$snapshot.type("all")
renv::dependencies()
renv::status()
renv::rebuild()
renv::status()
renv::settings$snapshot.type("implicit")
renv::status()
renv::snapshot()
renv::status
renv::status()
renv::dependencies()
renv::use("bslib@0.7.0","shiny@1.8.1.1","shinylive@0.1.1")
renv::dependencies()
renv::status()
renv::install("rmarkdown")
renv::install("knitr")
renv::install("tidyverse")
renv::settings$external.libraries()
renv::settings$use.cache(FALSE)
renv::settings$use.cache()
renv::paths()
renv::paths
renv::project()
renv::repair()
renv::load()
renv::status()
library(bayestestR)
library(bayestestR)
detach("package:bayestestR", unload = TRUE)
remove.packages("credentials", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
library(cluster)
remove.packages("cluster", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
remove.packages("bayestestR", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
renv::remove("bayestestR")
remove.packages("googlesheets4", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
remove.packages("isoband", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
renv::snapshot()
renv::install("bayestestR")
renv::install("googlesheets4")
renv::install("isoband")
remove.packages("gitcreds", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
remove.packages("gh", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
remove.packages("gert", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
remove.packages("pak", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
remove.packages("pkgbuild", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
remove.packages("pkgdepends", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
remove.packages("pkgcache", lib="~/dcb-quarto-site/renv/library/R-4.3/x86_64-w64-mingw32")
renv::record("shiny@0.1.1")
renv::record("shiny@1.8.1.1")
renv::record("shinylive@0.1.1")
renv::status()
renv::record("archive@1.1.8")
renv::snapshot()
renv::clean()
renv::clean()
renv::snapshot()
renv::install("bslib")
renv::install("shiny")
renv::install("shinylive")
renv::install("askpass")
renv::install("backports")
renv::install("base64enc")
renv::install("bit")
renv::install("bit64")
renv::install("blob")
renv::install("broom")
renv::install("cachem")
renv::install("callr")
renv::install("cellranger")
renv::install("checkmate")
renv::status()
renv::install("cli")
renv::install("clipr")
renv::install("colorspace")
renv::install("commonmark")
renv::install("conflicted")
renv::install("cpp11")
renv::install("crayon")
renv::install("curl")
renv::install("data.table")
renv::install("datawizard")
renv::install("DBI")
renv::install("dbplyr")
renv::install("digest")
renv::install("distillery","dplyr","dtplyr")
renv::install("evaluate","extRemes","fansi","farver")
renv::install("fastmap","fontawesome","forcats","fs")
renv::install("gargle","generics","ggplot2","ggtext","glue")
renv::install("googledrive")
renv::install("gridExtra","gridtext","gtable","haven","highr")
renv::install("hms","htmltools","httr","ids","insight","jpeg")
renv::install("jquerylib","jsonlite","kableExtra","knitr","labeling","lattice")
renv::install("lifecycle","Lmoments","lubridate","magrittr","markdown")
renv::install("MASS","Matrix","memoise","mgcv","mime","modelr")
renv::install("modelsummary","munsell","nlme","openssl","parameters","performance","pillar")
renv::install("pkgconfig","png","prettyunits","processx")
renv::install("progress","ps","purrr","R6","ragg")
renv::install("rappdirs","RColorBrewer","Rcpp","RcppArmadillo")
renv::install("readr","readxl","rematch","rematch2","reprex","rlang","rmarkdown")
renv::install("rstudioapi","rvest","sass","scales","selectr")
renv::install("showtext","showtextdb","stringi","stringr","svglite","sys")
renv::install("sysfonts","systemfonts","tables","textshaping","tibble","tidyr")
renv::install("tidyselect","tidyverse","timechange","tinytable","tinytex","tzdb")
renv::install("uft8","uuid","vctrs","viridisLite","vroom","withr","xfun","xml2","yaml")
renv::install("utf8","uuid","vctrs","viridisLite","vroom","withr","xfun","xml2","yaml")
renv::isolate()
renv::lockfile_create()
renv::status()
renv::restore()
renv::repair()
renv::status()
renv::upgrade()
renv::status()
renv::dependencies()
renv::project()
renv::status()
library(shinylive)
renv::settings$snapshot.type()
renv::dependencies()
renv::install(downlit)
install.packages("downlit")
renv::install("downlit")
renv::status()
renv::snapshot()
renv::record("downlit")
renv::deactivate(clean=TRUE)
.libPaths()
gc()
install.packages(c("bslib","rmarkdown","knitr","tidyverse","shiny","shinylive","extRemes"))
.libPaths()
install.packages(c("ggtext","gridExtra","kableExtra"))
install.packages(c("xml2","downlit"))
#| code-fold: true
library(knitr)
knitr::opts_chunk$set(fig.width = 7, fig.align = "center",
fig.retina = 1, out.width = "90%",
collapse = TRUE)
#| code-fold: true
library(tidyverse)
library(ggtext)
library(extRemes)
library(gridExtra)
library(kableExtra)
library(httr)
library(jsonlite)
library(modelsummary)
library(showtext)
# Load FCwx data from extRemes package
data(FCwx)
# Query updated FCwx observations and combine
api <- GET("https://coagmet.colostate.edu/data/daily/fcl01.json?from=2000-01-01&to=2022-12-31&fields=tMax,tMin,precip")
FCwx2k <- do.call(cbind.data.frame,fromJSON(rawToChar(api$content))) |>
mutate(dt = as.Date(time,"%Y-%m-%d"), Dy = yday(dt), Mn = month(dt), Year = year(dt)) |>
select(dt,Dy,Mn,Year,tMin) |> rename(MnT = tMin)
FCwx <- FCwx |> mutate(dt = as.Date(paste(Dy,"-",Mn,"-",Year),"%d - %m - %Y")) |>
select(dt,Dy,Mn,Year,MnT)
FCwx <- bind_rows(FCwx,FCwx2k) |> mutate(doy = yday(dt))
FCwx <- FCwx[FCwx$MnT != -999,]
#windowsFonts(Inter = windowsFont("Inter"))
font_add_google("Inter","inter")
showtext_auto()
theme_nice <- function() {
theme_minimal(base_family = "inter") +
theme(panel.grid.minor = element_blank(),
panel.spacing.x = unit(25, "points"),
plot.title = element_text(family= "inter", face = "bold"),
axis.title = element_text(family = "inter"),
strip.text = element_text(family = "inter", face = "bold",
size = rel(1), hjust = 0),
strip.background = element_rect(fill = "grey80", color = NA))
}
update_geom_defaults("label", list(family="inter"))
update_geom_defaults(ggtext::GeomRichText, list(family="inter"))
#| code-fold: true
#| label: fig-global-plot
#| fig-cap: "Daily minimum temperatures in Fort Collins, CO between 1900 and 2022"
ggplot(data=FCwx,aes(x=dt,y=MnT)) +
geom_point(alpha=0.5,position="jitter") +
geom_smooth() +
xlab("Date") + ylab("Daily Minimum Temperature") +
theme_nice()
#| code-fold: true
#| label: tbl-fit0
#| tbl-cap: "Parameter estimates for stationary Generalized Extreme Value distribution fit to negative daily minimum temperatures in Fort Collins, CO between 1900 and 2022"
# Fit stationary model
fit0 <- fevd(-MnT ~ 1, FCwx, type = "GEV", span = 123, units = "deg F", time.units = "days", period.basis = "year")
# Stationary model summary table
fit0.summary <- summary(fit0, silent=TRUE)
params.ci.fit0 <- data.frame(matrix(ci(fit0, type = "parameter"),ncol=3))
colnames(params.ci.fit0) <- c("ll","est","ul")
fit0.model.summary <- params.ci.fit0 |>
mutate(estimate = paste(round(params.ci.fit0$est,digits=2)," (",round(params.ci.fit0$ll,digits=2),", ",round(params.ci.fit0$ul,digits=2),")", sep = "")) |>
select(estimate)
fit0.model.summary <- data.frame(params = c("Location, &#956;","Scale, &#963;","Shape, &#947;"), fit0.model.summary)
footnote(kbl(fit0.model.summary, format="html", booktabs=TRUE, col.names=c("Parameters", "Estimate (95% CI)"), row.names=FALSE, digits=2, align="lc", escape=FALSE) |>
column_spec(1,width="10em") |>
column_spec(2,width="12em") |>
kable_styling(full_width = FALSE, position="left"), paste("Negative log-likelihood (NLLH): ",round(fit0$results$value,2),"; Bayesian Information Criterion (BIC): ",round(fit0.summary$BIC,2), sep=""), footnote_as_chunk = TRUE)
#| code-fold: true
#| label: fig-moving-fit
#| fig-cap: "Generalized Extreme Value distribution parameters fit to running five-year windows of daily minimum temperature in Fort Collins, CO between 1902 and 2018"
# Fit GEVD using running five-year windows between 1902 and 2018 and store result
mnt.yrs <- list()
for (i in 1902:2018){
mnt.yrs[[i-1901]] <- fevd(-MnT ~ 1, FCwx |> filter(format(dt,"%Y") == seq(i-2,i+2)), type = "GEV", span = 5, units = "deg F", time.units = "days", period.basis = "year")
}
locs.yrs <- data.frame(years = seq(1902,2018),locations = matrix(unlist(lapply(mnt.yrs,'[[',c(20,1,1)))))
scls.yrs <- data.frame(years = seq(1902,2018),scales = matrix(unlist(lapply(mnt.yrs,'[[',c(20,1,2)))))
shps.yrs <- data.frame(years = seq(1902,2018),shapes = matrix(unlist(lapply(mnt.yrs,'[[',c(20,1,3)))))
p1 <- ggplot(data=locs.yrs, aes(x=years, y=locations)) +
labs(x = "Year", y = "Location, \u03bc", escape = FALSE) +
geom_hline(yintercept = -41.64) +
geom_hline(yintercept = -41.8, linetype = "dashed") +
geom_hline(yintercept = -41.48, linetype = "dashed") +
geom_point() + theme_nice() +
scale_x_continuous(breaks = c(1900, 1950, 2000))
p2 <- ggplot(data=scls.yrs, aes(x=years, y=scales)) +
labs(x = "Year", y = "Scale, \u03c3") +
geom_hline(yintercept = 15.26) +
geom_hline(yintercept = 15.15, linetype = "dashed") +
geom_hline(yintercept = 15.38, linetype = "dashed") +
geom_point() + theme_nice() +
scale_x_continuous(breaks = c(1900, 1950, 2000))
p3 <- ggplot(data=shps.yrs, aes(x=years, y=shapes)) +
labs(x = "Year", y = "Shape, \u03b3") +
geom_hline(yintercept = -0.136) +
geom_hline(yintercept = -0.143, linetype = "dashed") +
geom_hline(yintercept = -0.129, linetype = "dashed") +
geom_point() + theme_nice() +
scale_x_continuous(breaks = c(1900, 1950, 2000))
grid.arrange(p1,p2,p3,nrow=1)
#| code-fold: true
#| label: tbl-fit1
#| tbl-cap: "Parameter estimates for non-stationary Generalized Extreme Value distribution fit to negative daily minimum temperatures in Fort Collins, CO between 1900 and 2022"
# Non-stationary model 1
fit1 <- fevd(-MnT ~ 1, FCwx,location.fun = ~ cos(2*pi*doy/365.25) + sin(2*pi*doy/365.25) + Year, type = "GEV", span = 123, units = "deg F", time.units = "days", period.basis = "year")
# Non-stationary model 1 summary table
fit1.summary <- summary(fit1, silent=TRUE)
params.ci.fit1 <- data.frame(matrix(ci(fit1, type = "parameter"),ncol=3))
colnames(params.ci.fit1) <- c("ll","est","ul")
fit1.model.summary <- params.ci.fit1 |>
mutate(estimate = paste(round(params.ci.fit1$est,digits=2)," (",round(params.ci.fit1$ll,digits=2),", ",round(params.ci.fit1$ul,digits=2),")", sep = "")) |>
select(estimate)
fit1.model.summary <- data.frame(params = c("&#956;0", "&#956;1", "&#956;2", "&#956;3", "Scale, &#963;","Shape, &#947;"), fit1.model.summary)
footnote(kbl(fit1.model.summary, format="html", booktabs=TRUE, col.names=c("Parameters", "Estimate (95% CI)"), row.names=FALSE, digits=2, align="lc", escape=FALSE) |>
column_spec(1,width="10em") |>
column_spec(2,width="12em") |>
pack_rows("Location, &#956;", 1, 4, escape = FALSE) |>
kable_styling(full_width = FALSE, position = "left"), paste("Negative log-likelihood (NLLH): ",round(fit1$results$value,2),"; Bayesian Information Criterion (BIC): ",round(fit1.summary$BIC,2),"; See Equation 3 for the function used to model the location  parameter.", sep = ""), footnote_as_chunk = TRUE)
#| code-fold: true
#| label: tbl-fit2
#| tbl-cap: "Parameter estimates for non-stationary Generalized Extreme Value distribution fit to negative daily minimum temperatures in Fort Collins, CO between 1900 and 2022"
# Non-stationary model 2
fit2 <- fevd(-MnT ~ 1, FCwx,location.fun = ~ cos(2*pi*doy/365.25) + sin(2*pi*doy/365.25) + Year, scale.fun = ~ cos(2*pi*doy/365.25) + sin(2*pi*doy/365.25), use.phi = TRUE, type = "GEV", span = 123, units = "deg F", time.units = "days", period.basis = "year")
# Non-stationary model 2 summary table
fit2.summary <- summary(fit2, silent=TRUE)
params.ci.fit2 <- data.frame(matrix(ci(fit2, type = "parameter"),ncol=3))
colnames(params.ci.fit2) <- c("ll","est","ul")
fit2.model.summary <- params.ci.fit2 |>
mutate(estimate = paste(round(params.ci.fit2$est,digits=2)," (",round(params.ci.fit2$ll,digits=2),", ",round(params.ci.fit2$ul,digits=2),")", sep = "")) |>
select(estimate)
fit2.model.summary <- data.frame(params = c("&#956;0", "&#956;1", "&#956;2", "&#956;3", "&#963;0", "&#963;1", "&#963;2", "Shape, &#947;"), fit2.model.summary)
footnote(kbl(fit2.model.summary, format="html", booktabs=TRUE, col.names=c("Parameters", "Estimate (95% CI)"), row.names=FALSE, digits=2, align="lc", escape=FALSE) |>
column_spec(1,width="10em") |>
column_spec(2,width="12em") |>
pack_rows("Location, &#956;", 1, 4, escape = FALSE) |>
pack_rows("Scale, &#963;", 5, 7, escape = FALSE) |>
kable_styling(full_width = FALSE, position = "left"), paste("Negative log-likelihood (NLLH): ",round(fit2$results$value,2),"; Bayesian Information Criterion (BIC): ",round(fit2.summary$BIC,2),"; See Equation 3 and Equation 4 for the functions used to model the location and scale parameter, respectively.", sep = ""), footnote_as_chunk = TRUE)
#| code-fold: true
#| label: fig-return-levels
#| fig-cap: "Effective 100-year return levels for daily minimum temperatures in Fort Collins, CO on different dates"
v1 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*60:120/365.25), mu2 = sin(2*pi*60:120/365.25), mu3 = rep(1900,61), phi1 = cos(2*pi*60:120/365.25), phi2 = sin(2*pi*60:120/365.25)))
ci100YrRLevelsMarApr1900 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v1),ncol=4))
colnames(ci100YrRLevelsMarApr1900) <- c("ll","est","ul","se")
v2 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*60:120/365.25), mu2 = sin(2*pi*60:120/365.25), mu3 = rep(1940,61), phi1 = cos(2*pi*60:120/365.25), phi2 = sin(2*pi*60:120/365.25)))
ci100YrRLevelsMarApr1940 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v2),ncol=4))
colnames(ci100YrRLevelsMarApr1940) <- c("ll","est","ul","se")
v3 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*60:120/365.25), mu2 = sin(2*pi*60:120/365.25), mu3 = rep(1980,61), phi1 = cos(2*pi*60:120/365.25), phi2 = sin(2*pi*60:120/365.25)))
ci100YrRLevelsMarApr1980 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v3),ncol=4))
colnames(ci100YrRLevelsMarApr1980) <- c("ll","est","ul","se")
v4 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*60:120/365.25), mu2 = sin(2*pi*60:120/365.25), mu3 = rep(2000,61), phi1 = cos(2*pi*60:120/365.25), phi2 = sin(2*pi*60:120/365.25)))
ci100YrRLevelsMarApr2000 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v4),ncol=4))
colnames(ci100YrRLevelsMarApr2000) <- c("ll","est","ul","se")
v5 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*60:120/365.25), mu2 = sin(2*pi*60:120/365.25), mu3 = rep(2020,61), phi1 = cos(2*pi*60:120/365.25), phi2 = sin(2*pi*60:120/365.25)))
ci100YrRLevelsMarApr2020 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v5),ncol=4))
colnames(ci100YrRLevelsMarApr2020) <- c("ll","est","ul","se")
v6 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*274:334/365.25), mu2 = sin(2*pi*274:334/365.25), mu3 = rep(1900,61), phi1 = cos(2*pi*274:334/365.25), phi2 = sin(2*pi*274:334/365.25)))
ci100YrRLevelsOctNov1900 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v6),ncol=4))
colnames(ci100YrRLevelsOctNov1900) <- c("ll","est","ul","se")
v7 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*274:334/365.25), mu2 = sin(2*pi*274:334/365.25), mu3 = rep(1940,61), phi1 = cos(2*pi*274:334/365.25), phi2 = sin(2*pi*274:334/365.25)))
ci100YrRLevelsOctNov1940 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v7),ncol=4))
colnames(ci100YrRLevelsOctNov1940) <- c("ll","est","ul","se")
v8 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*274:334/365.25), mu2 = sin(2*pi*274:334/365.25), mu3 = rep(1980,61), phi1 = cos(2*pi*274:334/365.25), phi2 = sin(2*pi*274:334/365.25)))
ci100YrRLevelsOctNov1980 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v8),ncol=4))
colnames(ci100YrRLevelsOctNov1980) <- c("ll","est","ul","se")
v9 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*274:334/365.25), mu2 = sin(2*pi*274:334/365.25), mu3 = rep(2000,61), phi1 = cos(2*pi*274:334/365.25), phi2 = sin(2*pi*274:334/365.25)))
ci100YrRLevelsOctNov2000 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v9),ncol=4))
colnames(ci100YrRLevelsOctNov2000) <- c("ll","est","ul","se")
v10 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*274:334/365.25), mu2 = sin(2*pi*274:334/365.25), mu3 = rep(2020,61), phi1 = cos(2*pi*274:334/365.25), phi2 = sin(2*pi*274:334/365.25)))
ci100YrRLevelsOctNov2020 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v10),ncol=4))
colnames(ci100YrRLevelsOctNov2020) <- c("ll","est","ul","se")
ciRLevels <- rbind(ci100YrRLevelsMarApr1900,ci100YrRLevelsMarApr1940,ci100YrRLevelsMarApr1980,ci100YrRLevelsMarApr2000,ci100YrRLevelsMarApr2020,ci100YrRLevelsOctNov1900,ci100YrRLevelsOctNov1940,ci100YrRLevelsOctNov1980,ci100YrRLevelsOctNov2000,ci100YrRLevelsOctNov2020) |> mutate(Year = rep(factor(c(1900,1940,1980,2000,2020)),each=61,times=2), dt = rbind(data.frame(dt = rep(seq(as.Date("1900/03/01"),as.Date("1900/04/30"),by="days"),5)),data.frame(dt = rep(seq(as.Date("1900/10/01"),as.Date("1900/11/30"),by="days"),5))), Season = rep(factor(c("Spring","Fall")),each=305))
ciRLevels[,1:3] <- ciRLevels[,1:3] * -1
ggplot(data = ciRLevels, aes(x = dt$dt, y = est)) +
geom_line(aes(color = Year), linewidth = 1) + geom_ribbon(aes(ymin=ll,ymax=ul,fill=Year),alpha=0.2) +
xlab("Date") + ylab("100-year daily low") + facet_grid(~factor(Season, levels = c("Spring","Fall")), scales="free") +
theme_nice()
#| code-fold: true
#| label: fig-validation
#| fig-cap: "Effective 100-year return levels for daily minimum temperatures (colored lines) in Fort Collins, CO compared to daily minimum temperatures during the 2022-2023 winter season (black line)"
v6 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*c(274:365,1:120)/365.25), mu2 = sin(2*pi*c(274:365,1:120)/365.25), mu3 = rep(1900,212), phi1 = cos(2*pi*c(274:365,1:120)/365.25), phi2 = sin(2*pi*c(274:365,1:120)/365.25)))
ci100YrRLevelsOctApr1900 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v6),ncol=4))
colnames(ci100YrRLevelsOctApr1900) <- c("ll","est","ul","se")
v7 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*c(274:365,1:120)/365.25), mu2 = sin(2*pi*c(274:365,1:120)/365.25), mu3 = rep(1940,212), phi1 = cos(2*pi*c(274:365,1:120)/365.25), phi2 = sin(2*pi*c(274:365,1:120)/365.25)))
ci100YrRLevelsOctApr1940 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v7),ncol=4))
colnames(ci100YrRLevelsOctApr1940) <- c("ll","est","ul","se")
v8 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*c(274:365,1:120)/365.25), mu2 = sin(2*pi*c(274:365,1:120)/365.25), mu3 = rep(1980,212), phi1 = cos(2*pi*c(274:365,1:120)/365.25), phi2 = sin(2*pi*c(274:365,1:120)/365.25)))
ci100YrRLevelsOctApr1980 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v8),ncol=4))
colnames(ci100YrRLevelsOctApr1980) <- c("ll","est","ul","se")
v9 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*c(274:365,1:120)/365.25), mu2 = sin(2*pi*c(274:365,1:120)/365.25), mu3 = rep(2000,212), phi1 = cos(2*pi*c(274:365,1:120)/365.25), phi2 = sin(2*pi*c(274:365,1:120)/365.25)))
ci100YrRLevelsOctApr2000 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v9),ncol=4))
colnames(ci100YrRLevelsOctApr2000) <- c("ll","est","ul","se")
v10 <- make.qcov(fit2, vals = list(mu1 = cos(2*pi*c(274:365,1:120)/365.25), mu2 = sin(2*pi*c(274:365,1:120)/365.25), mu3 = rep(2020,212), phi1 = cos(2*pi*c(274:365,1:120)/365.25), phi2 = sin(2*pi*c(274:365,1:120)/365.25)))
ci100YrRLevelsOctApr2020 <- data.frame(matrix(ci(fit2, type = "return.level", return.period = 100, qcov = v10),ncol=4))
colnames(ci100YrRLevelsOctApr2020) <- c("ll","est","ul","se")
ciRLevels <- rbind(ci100YrRLevelsOctApr1900,ci100YrRLevelsOctApr1940,ci100YrRLevelsOctApr1980,ci100YrRLevelsOctApr2000,ci100YrRLevelsOctApr2020) |> mutate(Year = rep(factor(c(1900,1940,1980,2000,2020)),each=212,times=1), dt = rbind(data.frame(dt = rep(seq(as.Date("2022/10/01"),as.Date("2023/04/30"),by="days"),5))))
ciRLevels[,1:3] <- ciRLevels[,1:3] * -1
api <- GET("https://coagmet.colostate.edu/data/daily/fcl01.json?from=2022-10-01&to=2023-04-30&fields=tMax,tMin,precip")
FCwx2223 <- do.call(cbind.data.frame,fromJSON(rawToChar(api$content))) |>
mutate(dt = as.Date(time,"%Y-%m-%d"), Dy = yday(dt), Mn = month(dt), Year = year(dt)) |>
select(dt,Dy,Mn,Year,tMin) |> rename(MnT = tMin)
ggplot(data = ciRLevels, aes(x = dt$dt, y = est)) +
geom_line(aes(color = Year), linewidth = 1) + geom_ribbon(aes(ymin=ll,ymax=ul,fill=Year),alpha=0.2) +
geom_line(data=FCwx2223,aes(x=dt, y=MnT), size=1) +
xlab("Date") + ylab("100-year daily low") +
theme_nice()
ggplot(data=FCwx,aes(x=dt,y=MnT)) +
geom_point(alpha=0.5,position="jitter") +
geom_smooth() +
xlab("Date") + ylab("Daily Minimum Temperature") +
theme_nice()
#| code-fold: true
library(tidyverse)
library(ggtext)
library(extRemes)
library(gridExtra)
library(kableExtra)
library(httr)
library(jsonlite)
library(modelsummary)
library(showtext)
# Load FCwx data from extRemes package
data(FCwx)
# Query updated FCwx observations and combine
api <- GET("https://coagmet.colostate.edu/data/daily/fcl01.json?from=2000-01-01&to=2022-12-31&fields=tMax,tMin,precip")
FCwx2k <- do.call(cbind.data.frame,fromJSON(rawToChar(api$content))) |>
mutate(dt = as.Date(time,"%Y-%m-%d"), Dy = yday(dt), Mn = month(dt), Year = year(dt)) |>
select(dt,Dy,Mn,Year,tAvg,tMin) |> rename(MnT = tMin)
#| code-fold: true
library(tidyverse)
library(ggtext)
library(extRemes)
library(gridExtra)
library(kableExtra)
library(httr)
library(jsonlite)
library(modelsummary)
library(showtext)
# Load FCwx data from extRemes package
data(FCwx)
# Query updated FCwx observations and combine
api <- GET("https://coagmet.colostate.edu/data/daily/fcl01.json?from=2000-01-01&to=2022-12-31&fields=tAvg,tMax,tMin,precip")
FCwx2k <- do.call(cbind.data.frame,fromJSON(rawToChar(api$content))) |>
mutate(dt = as.Date(time,"%Y-%m-%d"), Dy = yday(dt), Mn = month(dt), Year = year(dt)) |>
select(dt,Dy,Mn,Year,tAvg,tMin) |> rename(MnT = tMin)
FCwx <- FCwx |> mutate(dt = as.Date(paste(Dy,"-",Mn,"-",Year),"%d - %m - %Y")) |>
select(dt,Dy,Mn,Year,MnT)
FCwx <- bind_rows(FCwx,FCwx2k) |> mutate(doy = yday(dt))
FCwx <- FCwx[FCwx$MnT != -999,]
#windowsFonts(Inter = windowsFont("Inter"))
font_add_google("Inter","inter")
showtext_auto()
theme_nice <- function() {
theme_minimal(base_family = "inter") +
theme(panel.grid.minor = element_blank(),
panel.spacing.x = unit(25, "points"),
plot.title = element_text(family= "inter", face = "bold"),
axis.title = element_text(family = "inter"),
strip.text = element_text(family = "inter", face = "bold",
size = rel(1), hjust = 0),
strip.background = element_rect(fill = "grey80", color = NA))
}
update_geom_defaults("label", list(family="inter"))
update_geom_defaults(ggtext::GeomRichText, list(family="inter"))
View(FCwx)
data(FCwx)
View(FCwx)
View(FCwx)
api <- GET("https://coagmet.colostate.edu/data/daily/fcl01.json?from=1900-01-01&to=2022-12-31&fields=tAvg,tMax,tMin,precip")
FCwx2k <- do.call(cbind.data.frame,fromJSON(rawToChar(api$content))) |>
mutate(dt = as.Date(time,"%Y-%m-%d"), Dy = yday(dt), Mn = month(dt), Year = year(dt)) |>
select(dt,Dy,Mn,Year,tAvg,tMin) |> rename(MnT = tMin)
View(FCwx2k)
View(api)
FCwx2k <- do.call(cbind.data.frame,fromJSON(rawToChar(api$content)))
View(FCwx2k)
